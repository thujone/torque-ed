// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model SchoolSystem {
  id        String     @id @default(cuid())
  name      String     @unique @default("")
  subdomain String     @unique @default("")
  settings  Json?      @default("{\"attendanceGracePeriod\":30,\"defaultClassDuration\":90,\"minimumAttendancePercentage\":70}")
  users     User[]     @relation("User_schoolSystem")
  schools   School[]   @relation("School_schoolSystem")
  courses   Course[]   @relation("Course_schoolSystem")
  semesters Semester[] @relation("Semester_schoolSystem")
  students  Student[]  @relation("Student_schoolSystem")
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model School {
  id                  String        @id @default(cuid())
  name                String        @default("")
  address             String        @default("")
  schoolSystem        SchoolSystem? @relation("School_schoolSystem", fields: [schoolSystemId], references: [id])
  schoolSystemId      String?       @map("schoolSystem")
  administrators      User[]        @relation("School_administrators")
  classes             Class[]       @relation("Class_school")
  createdAt           DateTime?     @default(now())
  updatedAt           DateTime?     @updatedAt
  from_Student_school Student[]     @relation("Student_school")

  @@index([schoolSystemId])
}

model Course {
  id             String        @id @default(cuid())
  code           String        @default("")
  name           String        @default("")
  description    String        @default("")
  prerequisites  String        @default("")
  schoolSystem   SchoolSystem? @relation("Course_schoolSystem", fields: [schoolSystemId], references: [id])
  schoolSystemId String?       @map("schoolSystem")
  classes        Class[]       @relation("Class_course")
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt

  @@index([schoolSystemId])
}

model Semester {
  id               String        @id @default(cuid())
  name             String        @default("")
  startDate        DateTime      @postgresql.Date
  endDate          DateTime      @postgresql.Date
  midtermStartDate DateTime?     @postgresql.Date
  midtermEndDate   DateTime?     @postgresql.Date
  finalStartDate   DateTime?     @postgresql.Date
  finalEndDate     DateTime?     @postgresql.Date
  schoolSystem     SchoolSystem? @relation("Semester_schoolSystem", fields: [schoolSystemId], references: [id])
  schoolSystemId   String?       @map("schoolSystem")
  holidays         Holiday[]     @relation("Holiday_semester")
  classes          Class[]       @relation("Class_semester")
  createdAt        DateTime?     @default(now())
  updatedAt        DateTime?     @updatedAt

  @@index([schoolSystemId])
}

model Holiday {
  id         String    @id @default(cuid())
  name       String    @default("")
  date       DateTime  @postgresql.Date
  semester   Semester? @relation("Holiday_semester", fields: [semesterId], references: [id])
  semesterId String?   @map("semester")
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([semesterId])
}

model Class {
  id                 String         @id @default(cuid())
  section            String         @default("")
  maxEnrollment      Int            @default(30)
  room               String         @default("")
  building           String         @default("")
  schedule           Json?          @default("{\"days\":[\"M\",\"W\",\"F\"],\"startTime\":\"08:00\",\"endTime\":\"09:30\"}")
  course             Course?        @relation("Class_course", fields: [courseId], references: [id])
  courseId           String?        @map("course")
  semester           Semester?      @relation("Class_semester", fields: [semesterId], references: [id])
  semesterId         String?        @map("semester")
  school             School?        @relation("Class_school", fields: [schoolId], references: [id])
  schoolId           String?        @map("school")
  instructor         User?          @relation("Class_instructor", fields: [instructorId], references: [id])
  instructorId       String?        @map("instructor")
  teachingAssistants User[]         @relation("Class_teachingAssistants")
  enrollments        Enrollment[]   @relation("Enrollment_class")
  sessions           ClassSession[] @relation("ClassSession_class")
  createdAt          DateTime?      @default(now())
  updatedAt          DateTime?      @updatedAt

  @@index([courseId])
  @@index([semesterId])
  @@index([schoolId])
  @@index([instructorId])
}

model ClassSession {
  id                 String                      @id @default(cuid())
  scheduledDate      DateTime                    @postgresql.Date
  dayOfWeek          String                      @default("")
  courseNumber       String                      @default("")
  scheduledStartTime String                      @default("")
  scheduledEndTime   String                      @default("")
  actualDate         DateTime?                   @postgresql.Date
  sessionType        ClassSessionSessionTypeType @default(regular)
  status             ClassSessionStatusType      @default(scheduled)
  isMidterm          Boolean                     @default(false)
  isFinal            Boolean                     @default(false)
  room               String                      @default("")
  class              Class?                      @relation("ClassSession_class", fields: [classId], references: [id])
  classId            String?                     @map("class")
  attendanceRecords  AttendanceRecord[]          @relation("AttendanceRecord_classSession")
  createdAt          DateTime?                   @default(now())
  updatedAt          DateTime?                   @updatedAt

  @@index([classId])
}

model User {
  id                             String             @id @default(cuid())
  email                          String             @unique @default("")
  password                       String
  firstName                      String             @default("")
  lastName                       String             @default("")
  roles                          UserRoleType?      @default(instructor)
  schoolSystem                   SchoolSystem?      @relation("User_schoolSystem", fields: [schoolSystemId], references: [id])
  schoolSystemId                 String?            @map("schoolSystem")
  schools                        School[]           @relation("School_administrators")
  instructorClasses              Class[]            @relation("Class_instructor")
  taClasses                      Class[]            @relation("Class_teachingAssistants")
  createdAt                      DateTime?          @default(now())
  updatedAt                      DateTime?          @updatedAt
  from_AttendanceRecord_markedBy AttendanceRecord[] @relation("AttendanceRecord_markedBy")

  @@index([schoolSystemId])
}

model Student {
  id             String        @id @default(cuid())
  studentId      String        @unique @default("")
  firstName      String        @default("")
  lastName       String        @default("")
  email          String        @default("")
  qrCode         String        @unique @default("")
  schoolSystem   SchoolSystem? @relation("Student_schoolSystem", fields: [schoolSystemId], references: [id])
  schoolSystemId String?       @map("schoolSystem")
  school         School?       @relation("Student_school", fields: [schoolId], references: [id])
  schoolId       String?       @map("school")
  enrollments    Enrollment[]  @relation("Enrollment_student")
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt

  @@index([schoolSystemId])
  @@index([schoolId])
}

model Enrollment {
  id                String               @id @default(cuid())
  student           Student?             @relation("Enrollment_student", fields: [studentId], references: [id])
  studentId         String?              @map("student")
  class             Class?               @relation("Enrollment_class", fields: [classId], references: [id])
  classId           String?              @map("class")
  status            EnrollmentStatusType @default(enrolled)
  waitlistPosition  Int?
  enrolledAt        DateTime?
  droppedAt         DateTime?
  attendanceRecords AttendanceRecord[]   @relation("AttendanceRecord_enrollment")
  createdAt         DateTime?            @default(now())
  updatedAt         DateTime?            @updatedAt

  @@index([studentId])
  @@index([classId])
}

model AttendanceRecord {
  id              String                     @id @default(cuid())
  status          AttendanceRecordStatusType @default(present)
  clockInTime     DateTime?
  clockOutTime    DateTime?
  sessionDuration Int?
  markedAt        DateTime?                  @default(now())
  notes           String                     @default("")
  enrollment      Enrollment?                @relation("AttendanceRecord_enrollment", fields: [enrollmentId], references: [id])
  enrollmentId    String?                    @map("enrollment")
  classSession    ClassSession?              @relation("AttendanceRecord_classSession", fields: [classSessionId], references: [id])
  classSessionId  String?                    @map("classSession")
  markedBy        User?                      @relation("AttendanceRecord_markedBy", fields: [markedById], references: [id])
  markedById      String?                    @map("markedBy")
  createdAt       DateTime?                  @default(now())
  updatedAt       DateTime?                  @updatedAt

  @@index([enrollmentId])
  @@index([classSessionId])
  @@index([markedById])
}

enum ClassSessionSessionTypeType {
  regular
  midterm
  final
  lab
}

enum ClassSessionStatusType {
  scheduled
  completed
  cancelled
}

enum UserRoleType {
  superAdmin
  admin
  instructor
  ta
}

enum EnrollmentStatusType {
  enrolled
  waitlisted
  dropped
}

enum AttendanceRecordStatusType {
  present
  absent
  excused
}
