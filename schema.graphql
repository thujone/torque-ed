# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type SchoolSystem {
  id: ID!
  name: String
  subdomain: String
  settings: JSON
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  schools(where: SchoolWhereInput! = {}, orderBy: [SchoolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SchoolWhereUniqueInput): [School!]
  schoolsCount(where: SchoolWhereInput! = {}): Int
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  semesters(where: SemesterWhereInput! = {}, orderBy: [SemesterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SemesterWhereUniqueInput): [Semester!]
  semestersCount(where: SemesterWhereInput! = {}): Int
  students(where: StudentWhereInput! = {}, orderBy: [StudentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudentWhereUniqueInput): [Student!]
  studentsCount(where: StudentWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SchoolSystemWhereUniqueInput {
  id: ID
  name: String
  subdomain: String
}

input SchoolSystemWhereInput {
  AND: [SchoolSystemWhereInput!]
  OR: [SchoolSystemWhereInput!]
  NOT: [SchoolSystemWhereInput!]
  id: IDFilter
  name: StringFilter
  subdomain: StringFilter
  users: UserManyRelationFilter
  schools: SchoolManyRelationFilter
  courses: CourseManyRelationFilter
  semesters: SemesterManyRelationFilter
  students: StudentManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input SchoolManyRelationFilter {
  every: SchoolWhereInput
  some: SchoolWhereInput
  none: SchoolWhereInput
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input SemesterManyRelationFilter {
  every: SemesterWhereInput
  some: SemesterWhereInput
  none: SemesterWhereInput
}

input StudentManyRelationFilter {
  every: StudentWhereInput
  some: StudentWhereInput
  none: StudentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input SchoolSystemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  subdomain: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SchoolSystemUpdateInput {
  name: String
  subdomain: String
  settings: JSON
  users: UserRelateToManyForUpdateInput
  schools: SchoolRelateToManyForUpdateInput
  courses: CourseRelateToManyForUpdateInput
  semesters: SemesterRelateToManyForUpdateInput
  students: StudentRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input SchoolRelateToManyForUpdateInput {
  disconnect: [SchoolWhereUniqueInput!]
  set: [SchoolWhereUniqueInput!]
  create: [SchoolCreateInput!]
  connect: [SchoolWhereUniqueInput!]
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input SemesterRelateToManyForUpdateInput {
  disconnect: [SemesterWhereUniqueInput!]
  set: [SemesterWhereUniqueInput!]
  create: [SemesterCreateInput!]
  connect: [SemesterWhereUniqueInput!]
}

input StudentRelateToManyForUpdateInput {
  disconnect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

input SchoolSystemUpdateArgs {
  where: SchoolSystemWhereUniqueInput!
  data: SchoolSystemUpdateInput!
}

input SchoolSystemCreateInput {
  name: String
  subdomain: String
  settings: JSON
  users: UserRelateToManyForCreateInput
  schools: SchoolRelateToManyForCreateInput
  courses: CourseRelateToManyForCreateInput
  semesters: SemesterRelateToManyForCreateInput
  students: StudentRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input SchoolRelateToManyForCreateInput {
  create: [SchoolCreateInput!]
  connect: [SchoolWhereUniqueInput!]
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input SemesterRelateToManyForCreateInput {
  create: [SemesterCreateInput!]
  connect: [SemesterWhereUniqueInput!]
}

input StudentRelateToManyForCreateInput {
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

type School {
  id: ID!
  name: String
  address: String
  schoolSystem: SchoolSystem
  administrators(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  administratorsCount(where: UserWhereInput! = {}): Int
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolWhereUniqueInput {
  id: ID
}

input SchoolWhereInput {
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  schoolSystem: SchoolSystemWhereInput
  administrators: UserManyRelationFilter
  classes: ClassManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ClassManyRelationFilter {
  every: ClassWhereInput
  some: ClassWhereInput
  none: ClassWhereInput
}

input SchoolOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SchoolUpdateInput {
  name: String
  address: String
  schoolSystem: SchoolSystemRelateToOneForUpdateInput
  administrators: UserRelateToManyForUpdateInput
  classes: ClassRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolSystemRelateToOneForUpdateInput {
  create: SchoolSystemCreateInput
  connect: SchoolSystemWhereUniqueInput
  disconnect: Boolean
}

input ClassRelateToManyForUpdateInput {
  disconnect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  create: [ClassCreateInput!]
  connect: [ClassWhereUniqueInput!]
}

input SchoolUpdateArgs {
  where: SchoolWhereUniqueInput!
  data: SchoolUpdateInput!
}

input SchoolCreateInput {
  name: String
  address: String
  schoolSystem: SchoolSystemRelateToOneForCreateInput
  administrators: UserRelateToManyForCreateInput
  classes: ClassRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolSystemRelateToOneForCreateInput {
  create: SchoolSystemCreateInput
  connect: SchoolSystemWhereUniqueInput
}

input ClassRelateToManyForCreateInput {
  create: [ClassCreateInput!]
  connect: [ClassWhereUniqueInput!]
}

type Course {
  id: ID!
  code: String
  name: String
  description: String
  prerequisites: String
  schoolSystem: SchoolSystem
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  code: StringFilter
  name: StringFilter
  description: StringFilter
  prerequisites: StringFilter
  schoolSystem: SchoolSystemWhereInput
  classes: ClassManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CourseOrderByInput {
  id: OrderDirection
  code: OrderDirection
  name: OrderDirection
  description: OrderDirection
  prerequisites: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CourseUpdateInput {
  code: String
  name: String
  description: String
  prerequisites: String
  schoolSystem: SchoolSystemRelateToOneForUpdateInput
  classes: ClassRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  code: String
  name: String
  description: String
  prerequisites: String
  schoolSystem: SchoolSystemRelateToOneForCreateInput
  classes: ClassRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Semester {
  id: ID!
  name: String
  startDate: CalendarDay
  endDate: CalendarDay
  midtermStartDate: CalendarDay
  midtermEndDate: CalendarDay
  finalStartDate: CalendarDay
  finalEndDate: CalendarDay
  schoolSystem: SchoolSystem
  holidays(where: HolidayWhereInput! = {}, orderBy: [HolidayOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HolidayWhereUniqueInput): [Holiday!]
  holidaysCount(where: HolidayWhereInput! = {}): Int
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SemesterWhereUniqueInput {
  id: ID
}

input SemesterWhereInput {
  AND: [SemesterWhereInput!]
  OR: [SemesterWhereInput!]
  NOT: [SemesterWhereInput!]
  id: IDFilter
  name: StringFilter
  startDate: CalendarDayFilter
  endDate: CalendarDayFilter
  midtermStartDate: CalendarDayNullableFilter
  midtermEndDate: CalendarDayNullableFilter
  finalStartDate: CalendarDayNullableFilter
  finalEndDate: CalendarDayNullableFilter
  schoolSystem: SchoolSystemWhereInput
  holidays: HolidayManyRelationFilter
  classes: ClassManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input HolidayManyRelationFilter {
  every: HolidayWhereInput
  some: HolidayWhereInput
  none: HolidayWhereInput
}

input SemesterOrderByInput {
  id: OrderDirection
  name: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  midtermStartDate: OrderDirection
  midtermEndDate: OrderDirection
  finalStartDate: OrderDirection
  finalEndDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SemesterUpdateInput {
  name: String
  startDate: CalendarDay
  endDate: CalendarDay
  midtermStartDate: CalendarDay
  midtermEndDate: CalendarDay
  finalStartDate: CalendarDay
  finalEndDate: CalendarDay
  schoolSystem: SchoolSystemRelateToOneForUpdateInput
  holidays: HolidayRelateToManyForUpdateInput
  classes: ClassRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HolidayRelateToManyForUpdateInput {
  disconnect: [HolidayWhereUniqueInput!]
  set: [HolidayWhereUniqueInput!]
  create: [HolidayCreateInput!]
  connect: [HolidayWhereUniqueInput!]
}

input SemesterUpdateArgs {
  where: SemesterWhereUniqueInput!
  data: SemesterUpdateInput!
}

input SemesterCreateInput {
  name: String
  startDate: CalendarDay
  endDate: CalendarDay
  midtermStartDate: CalendarDay
  midtermEndDate: CalendarDay
  finalStartDate: CalendarDay
  finalEndDate: CalendarDay
  schoolSystem: SchoolSystemRelateToOneForCreateInput
  holidays: HolidayRelateToManyForCreateInput
  classes: ClassRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HolidayRelateToManyForCreateInput {
  create: [HolidayCreateInput!]
  connect: [HolidayWhereUniqueInput!]
}

type Holiday {
  id: ID!
  name: String
  date: CalendarDay
  semester: Semester
  createdAt: DateTime
  updatedAt: DateTime
}

input HolidayWhereUniqueInput {
  id: ID
}

input HolidayWhereInput {
  AND: [HolidayWhereInput!]
  OR: [HolidayWhereInput!]
  NOT: [HolidayWhereInput!]
  id: IDFilter
  name: StringFilter
  date: CalendarDayFilter
  semester: SemesterWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HolidayOrderByInput {
  id: OrderDirection
  name: OrderDirection
  date: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HolidayUpdateInput {
  name: String
  date: CalendarDay
  semester: SemesterRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SemesterRelateToOneForUpdateInput {
  create: SemesterCreateInput
  connect: SemesterWhereUniqueInput
  disconnect: Boolean
}

input HolidayUpdateArgs {
  where: HolidayWhereUniqueInput!
  data: HolidayUpdateInput!
}

input HolidayCreateInput {
  name: String
  date: CalendarDay
  semester: SemesterRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SemesterRelateToOneForCreateInput {
  create: SemesterCreateInput
  connect: SemesterWhereUniqueInput
}

type Class {
  id: ID!
  section: String
  maxEnrollment: Int
  room: String
  building: String
  schedule: JSON
  course: Course
  semester: Semester
  school: School
  instructor: User
  teachingAssistants(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  teachingAssistantsCount(where: UserWhereInput! = {}): Int
  enrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  sessions(where: ClassSessionWhereInput! = {}, orderBy: [ClassSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassSessionWhereUniqueInput): [ClassSession!]
  sessionsCount(where: ClassSessionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassWhereUniqueInput {
  id: ID
}

input ClassWhereInput {
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
  id: IDFilter
  section: StringFilter
  maxEnrollment: IntFilter
  room: StringFilter
  building: StringFilter
  course: CourseWhereInput
  semester: SemesterWhereInput
  school: SchoolWhereInput
  instructor: UserWhereInput
  teachingAssistants: UserManyRelationFilter
  enrollments: EnrollmentManyRelationFilter
  sessions: ClassSessionManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input EnrollmentManyRelationFilter {
  every: EnrollmentWhereInput
  some: EnrollmentWhereInput
  none: EnrollmentWhereInput
}

input ClassSessionManyRelationFilter {
  every: ClassSessionWhereInput
  some: ClassSessionWhereInput
  none: ClassSessionWhereInput
}

input ClassOrderByInput {
  id: OrderDirection
  section: OrderDirection
  maxEnrollment: OrderDirection
  room: OrderDirection
  building: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClassUpdateInput {
  section: String
  maxEnrollment: Int
  room: String
  building: String
  schedule: JSON
  course: CourseRelateToOneForUpdateInput
  semester: SemesterRelateToOneForUpdateInput
  school: SchoolRelateToOneForUpdateInput
  instructor: UserRelateToOneForUpdateInput
  teachingAssistants: UserRelateToManyForUpdateInput
  enrollments: EnrollmentRelateToManyForUpdateInput
  sessions: ClassSessionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input SchoolRelateToOneForUpdateInput {
  create: SchoolCreateInput
  connect: SchoolWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input EnrollmentRelateToManyForUpdateInput {
  disconnect: [EnrollmentWhereUniqueInput!]
  set: [EnrollmentWhereUniqueInput!]
  create: [EnrollmentCreateInput!]
  connect: [EnrollmentWhereUniqueInput!]
}

input ClassSessionRelateToManyForUpdateInput {
  disconnect: [ClassSessionWhereUniqueInput!]
  set: [ClassSessionWhereUniqueInput!]
  create: [ClassSessionCreateInput!]
  connect: [ClassSessionWhereUniqueInput!]
}

input ClassUpdateArgs {
  where: ClassWhereUniqueInput!
  data: ClassUpdateInput!
}

input ClassCreateInput {
  section: String
  maxEnrollment: Int
  room: String
  building: String
  schedule: JSON
  course: CourseRelateToOneForCreateInput
  semester: SemesterRelateToOneForCreateInput
  school: SchoolRelateToOneForCreateInput
  instructor: UserRelateToOneForCreateInput
  teachingAssistants: UserRelateToManyForCreateInput
  enrollments: EnrollmentRelateToManyForCreateInput
  sessions: ClassSessionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

input SchoolRelateToOneForCreateInput {
  create: SchoolCreateInput
  connect: SchoolWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input EnrollmentRelateToManyForCreateInput {
  create: [EnrollmentCreateInput!]
  connect: [EnrollmentWhereUniqueInput!]
}

input ClassSessionRelateToManyForCreateInput {
  create: [ClassSessionCreateInput!]
  connect: [ClassSessionWhereUniqueInput!]
}

type ClassSession {
  id: ID!
  scheduledDate: CalendarDay
  dayOfWeek: String
  courseNumber: String
  scheduledStartTime: String
  scheduledEndTime: String
  actualDate: CalendarDay
  sessionType: ClassSessionSessionTypeType
  status: ClassSessionStatusType
  isMidterm: Boolean
  isFinal: Boolean
  room: String
  class: Class
  attendanceRecords(where: AttendanceRecordWhereInput! = {}, orderBy: [AttendanceRecordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttendanceRecordWhereUniqueInput): [AttendanceRecord!]
  attendanceRecordsCount(where: AttendanceRecordWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum ClassSessionSessionTypeType {
  regular
  midterm
  final
  lab
}

enum ClassSessionStatusType {
  scheduled
  completed
  cancelled
}

input ClassSessionWhereUniqueInput {
  id: ID
}

input ClassSessionWhereInput {
  AND: [ClassSessionWhereInput!]
  OR: [ClassSessionWhereInput!]
  NOT: [ClassSessionWhereInput!]
  id: IDFilter
  scheduledDate: CalendarDayFilter
  dayOfWeek: StringFilter
  courseNumber: StringFilter
  scheduledStartTime: StringFilter
  scheduledEndTime: StringFilter
  actualDate: CalendarDayNullableFilter
  sessionType: ClassSessionSessionTypeTypeNullableFilter
  status: ClassSessionStatusTypeNullableFilter
  isMidterm: BooleanFilter
  isFinal: BooleanFilter
  room: StringFilter
  class: ClassWhereInput
  attendanceRecords: AttendanceRecordManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ClassSessionSessionTypeTypeNullableFilter {
  equals: ClassSessionSessionTypeType
  in: [ClassSessionSessionTypeType!]
  notIn: [ClassSessionSessionTypeType!]
  not: ClassSessionSessionTypeTypeNullableFilter
}

input ClassSessionStatusTypeNullableFilter {
  equals: ClassSessionStatusType
  in: [ClassSessionStatusType!]
  notIn: [ClassSessionStatusType!]
  not: ClassSessionStatusTypeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AttendanceRecordManyRelationFilter {
  every: AttendanceRecordWhereInput
  some: AttendanceRecordWhereInput
  none: AttendanceRecordWhereInput
}

input ClassSessionOrderByInput {
  id: OrderDirection
  scheduledDate: OrderDirection
  dayOfWeek: OrderDirection
  courseNumber: OrderDirection
  scheduledStartTime: OrderDirection
  scheduledEndTime: OrderDirection
  actualDate: OrderDirection
  sessionType: OrderDirection
  status: OrderDirection
  isMidterm: OrderDirection
  isFinal: OrderDirection
  room: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClassSessionUpdateInput {
  scheduledDate: CalendarDay
  dayOfWeek: String
  courseNumber: String
  scheduledStartTime: String
  scheduledEndTime: String
  actualDate: CalendarDay
  sessionType: ClassSessionSessionTypeType
  status: ClassSessionStatusType
  isMidterm: Boolean
  isFinal: Boolean
  room: String
  class: ClassRelateToOneForUpdateInput
  attendanceRecords: AttendanceRecordRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassRelateToOneForUpdateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
  disconnect: Boolean
}

input AttendanceRecordRelateToManyForUpdateInput {
  disconnect: [AttendanceRecordWhereUniqueInput!]
  set: [AttendanceRecordWhereUniqueInput!]
  create: [AttendanceRecordCreateInput!]
  connect: [AttendanceRecordWhereUniqueInput!]
}

input ClassSessionUpdateArgs {
  where: ClassSessionWhereUniqueInput!
  data: ClassSessionUpdateInput!
}

input ClassSessionCreateInput {
  scheduledDate: CalendarDay
  dayOfWeek: String
  courseNumber: String
  scheduledStartTime: String
  scheduledEndTime: String
  actualDate: CalendarDay
  sessionType: ClassSessionSessionTypeType
  status: ClassSessionStatusType
  isMidterm: Boolean
  isFinal: Boolean
  room: String
  class: ClassRelateToOneForCreateInput
  attendanceRecords: AttendanceRecordRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassRelateToOneForCreateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
}

input AttendanceRecordRelateToManyForCreateInput {
  create: [AttendanceRecordCreateInput!]
  connect: [AttendanceRecordWhereUniqueInput!]
}

type User {
  id: ID!
  email: String
  password: PasswordState
  firstName: String
  lastName: String
  roles: UserRoleType
  schoolSystem: SchoolSystem
  schools(where: SchoolWhereInput! = {}, orderBy: [SchoolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SchoolWhereUniqueInput): [School!]
  schoolsCount(where: SchoolWhereInput! = {}): Int
  instructorClasses(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  instructorClassesCount(where: ClassWhereInput! = {}): Int
  taClasses(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  taClassesCount(where: ClassWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  superAdmin
  admin
  instructor
  ta
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  roles: UserRoleTypeNullableFilter
  schoolSystem: SchoolSystemWhereInput
  schools: SchoolManyRelationFilter
  instructorClasses: ClassManyRelationFilter
  taClasses: ClassManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  roles: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserUpdateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  roles: UserRoleType
  schoolSystem: SchoolSystemRelateToOneForUpdateInput
  schools: SchoolRelateToManyForUpdateInput
  instructorClasses: ClassRelateToManyForUpdateInput
  taClasses: ClassRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  roles: UserRoleType
  schoolSystem: SchoolSystemRelateToOneForCreateInput
  schools: SchoolRelateToManyForCreateInput
  instructorClasses: ClassRelateToManyForCreateInput
  taClasses: ClassRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Student {
  id: ID!
  studentId: String
  firstName: String
  lastName: String
  email: String
  qrCode: String
  displayName: String
  schoolSystem: SchoolSystem
  school: School
  enrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input StudentWhereUniqueInput {
  id: ID
  studentId: String
  qrCode: String
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
  id: IDFilter
  studentId: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  qrCode: StringFilter
  schoolSystem: SchoolSystemWhereInput
  school: SchoolWhereInput
  enrollments: EnrollmentManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input StudentOrderByInput {
  id: OrderDirection
  studentId: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  qrCode: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input StudentUpdateInput {
  studentId: String
  firstName: String
  lastName: String
  email: String
  qrCode: String
  schoolSystem: SchoolSystemRelateToOneForUpdateInput
  school: SchoolRelateToOneForUpdateInput
  enrollments: EnrollmentRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input StudentUpdateArgs {
  where: StudentWhereUniqueInput!
  data: StudentUpdateInput!
}

input StudentCreateInput {
  studentId: String
  firstName: String
  lastName: String
  email: String
  qrCode: String
  schoolSystem: SchoolSystemRelateToOneForCreateInput
  school: SchoolRelateToOneForCreateInput
  enrollments: EnrollmentRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Enrollment {
  id: ID!
  student: Student
  class: Class
  status: EnrollmentStatusType
  waitlistPosition: Int
  enrolledAt: DateTime
  droppedAt: DateTime
  attendanceRecords(where: AttendanceRecordWhereInput! = {}, orderBy: [AttendanceRecordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttendanceRecordWhereUniqueInput): [AttendanceRecord!]
  attendanceRecordsCount(where: AttendanceRecordWhereInput! = {}): Int
  studentFirstName: String
  studentLastName: String
  courseCode: String
  classSection: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum EnrollmentStatusType {
  enrolled
  waitlisted
  dropped
}

input EnrollmentWhereUniqueInput {
  id: ID
}

input EnrollmentWhereInput {
  AND: [EnrollmentWhereInput!]
  OR: [EnrollmentWhereInput!]
  NOT: [EnrollmentWhereInput!]
  id: IDFilter
  student: StudentWhereInput
  class: ClassWhereInput
  status: EnrollmentStatusTypeNullableFilter
  waitlistPosition: IntNullableFilter
  enrolledAt: DateTimeNullableFilter
  droppedAt: DateTimeNullableFilter
  attendanceRecords: AttendanceRecordManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input EnrollmentStatusTypeNullableFilter {
  equals: EnrollmentStatusType
  in: [EnrollmentStatusType!]
  notIn: [EnrollmentStatusType!]
  not: EnrollmentStatusTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input EnrollmentOrderByInput {
  id: OrderDirection
  status: OrderDirection
  waitlistPosition: OrderDirection
  enrolledAt: OrderDirection
  droppedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EnrollmentUpdateInput {
  student: StudentRelateToOneForUpdateInput
  class: ClassRelateToOneForUpdateInput
  status: EnrollmentStatusType
  waitlistPosition: Int
  enrolledAt: DateTime
  droppedAt: DateTime
  attendanceRecords: AttendanceRecordRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input StudentRelateToOneForUpdateInput {
  create: StudentCreateInput
  connect: StudentWhereUniqueInput
  disconnect: Boolean
}

input EnrollmentUpdateArgs {
  where: EnrollmentWhereUniqueInput!
  data: EnrollmentUpdateInput!
}

input EnrollmentCreateInput {
  student: StudentRelateToOneForCreateInput
  class: ClassRelateToOneForCreateInput
  status: EnrollmentStatusType
  waitlistPosition: Int
  enrolledAt: DateTime
  droppedAt: DateTime
  attendanceRecords: AttendanceRecordRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input StudentRelateToOneForCreateInput {
  create: StudentCreateInput
  connect: StudentWhereUniqueInput
}

type AttendanceRecord {
  id: ID!
  status: AttendanceRecordStatusType
  clockInTime: DateTime
  clockOutTime: DateTime
  sessionDuration: Int
  markedAt: DateTime
  notes: String
  enrollment: Enrollment
  classSession: ClassSession
  markedBy: User
  createdAt: DateTime
  updatedAt: DateTime
}

enum AttendanceRecordStatusType {
  present
  absent
  excused
}

input AttendanceRecordWhereUniqueInput {
  id: ID
}

input AttendanceRecordWhereInput {
  AND: [AttendanceRecordWhereInput!]
  OR: [AttendanceRecordWhereInput!]
  NOT: [AttendanceRecordWhereInput!]
  id: IDFilter
  status: AttendanceRecordStatusTypeNullableFilter
  clockInTime: DateTimeNullableFilter
  clockOutTime: DateTimeNullableFilter
  sessionDuration: IntNullableFilter
  markedAt: DateTimeNullableFilter
  notes: StringFilter
  enrollment: EnrollmentWhereInput
  classSession: ClassSessionWhereInput
  markedBy: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AttendanceRecordStatusTypeNullableFilter {
  equals: AttendanceRecordStatusType
  in: [AttendanceRecordStatusType!]
  notIn: [AttendanceRecordStatusType!]
  not: AttendanceRecordStatusTypeNullableFilter
}

input AttendanceRecordOrderByInput {
  id: OrderDirection
  status: OrderDirection
  clockInTime: OrderDirection
  clockOutTime: OrderDirection
  sessionDuration: OrderDirection
  markedAt: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AttendanceRecordUpdateInput {
  status: AttendanceRecordStatusType
  clockInTime: DateTime
  clockOutTime: DateTime
  sessionDuration: Int
  markedAt: DateTime
  notes: String
  enrollment: EnrollmentRelateToOneForUpdateInput
  classSession: ClassSessionRelateToOneForUpdateInput
  markedBy: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input EnrollmentRelateToOneForUpdateInput {
  create: EnrollmentCreateInput
  connect: EnrollmentWhereUniqueInput
  disconnect: Boolean
}

input ClassSessionRelateToOneForUpdateInput {
  create: ClassSessionCreateInput
  connect: ClassSessionWhereUniqueInput
  disconnect: Boolean
}

input AttendanceRecordUpdateArgs {
  where: AttendanceRecordWhereUniqueInput!
  data: AttendanceRecordUpdateInput!
}

input AttendanceRecordCreateInput {
  status: AttendanceRecordStatusType
  clockInTime: DateTime
  clockOutTime: DateTime
  sessionDuration: Int
  markedAt: DateTime
  notes: String
  enrollment: EnrollmentRelateToOneForCreateInput
  classSession: ClassSessionRelateToOneForCreateInput
  markedBy: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input EnrollmentRelateToOneForCreateInput {
  create: EnrollmentCreateInput
  connect: EnrollmentWhereUniqueInput
}

input ClassSessionRelateToOneForCreateInput {
  create: ClassSessionCreateInput
  connect: ClassSessionWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createSchoolSystem(data: SchoolSystemCreateInput!): SchoolSystem
  createSchoolSystems(data: [SchoolSystemCreateInput!]!): [SchoolSystem]
  updateSchoolSystem(where: SchoolSystemWhereUniqueInput!, data: SchoolSystemUpdateInput!): SchoolSystem
  updateSchoolSystems(data: [SchoolSystemUpdateArgs!]!): [SchoolSystem]
  deleteSchoolSystem(where: SchoolSystemWhereUniqueInput!): SchoolSystem
  deleteSchoolSystems(where: [SchoolSystemWhereUniqueInput!]!): [SchoolSystem]
  createSchool(data: SchoolCreateInput!): School
  createSchools(data: [SchoolCreateInput!]!): [School]
  updateSchool(where: SchoolWhereUniqueInput!, data: SchoolUpdateInput!): School
  updateSchools(data: [SchoolUpdateArgs!]!): [School]
  deleteSchool(where: SchoolWhereUniqueInput!): School
  deleteSchools(where: [SchoolWhereUniqueInput!]!): [School]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createSemester(data: SemesterCreateInput!): Semester
  createSemesters(data: [SemesterCreateInput!]!): [Semester]
  updateSemester(where: SemesterWhereUniqueInput!, data: SemesterUpdateInput!): Semester
  updateSemesters(data: [SemesterUpdateArgs!]!): [Semester]
  deleteSemester(where: SemesterWhereUniqueInput!): Semester
  deleteSemesters(where: [SemesterWhereUniqueInput!]!): [Semester]
  createHoliday(data: HolidayCreateInput!): Holiday
  createHolidays(data: [HolidayCreateInput!]!): [Holiday]
  updateHoliday(where: HolidayWhereUniqueInput!, data: HolidayUpdateInput!): Holiday
  updateHolidays(data: [HolidayUpdateArgs!]!): [Holiday]
  deleteHoliday(where: HolidayWhereUniqueInput!): Holiday
  deleteHolidays(where: [HolidayWhereUniqueInput!]!): [Holiday]
  createClass(data: ClassCreateInput!): Class
  createClasses(data: [ClassCreateInput!]!): [Class]
  updateClass(where: ClassWhereUniqueInput!, data: ClassUpdateInput!): Class
  updateClasses(data: [ClassUpdateArgs!]!): [Class]
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteClasses(where: [ClassWhereUniqueInput!]!): [Class]
  createClassSession(data: ClassSessionCreateInput!): ClassSession
  createClassSessions(data: [ClassSessionCreateInput!]!): [ClassSession]
  updateClassSession(where: ClassSessionWhereUniqueInput!, data: ClassSessionUpdateInput!): ClassSession
  updateClassSessions(data: [ClassSessionUpdateArgs!]!): [ClassSession]
  deleteClassSession(where: ClassSessionWhereUniqueInput!): ClassSession
  deleteClassSessions(where: [ClassSessionWhereUniqueInput!]!): [ClassSession]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createStudent(data: StudentCreateInput!): Student
  createStudents(data: [StudentCreateInput!]!): [Student]
  updateStudent(where: StudentWhereUniqueInput!, data: StudentUpdateInput!): Student
  updateStudents(data: [StudentUpdateArgs!]!): [Student]
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteStudents(where: [StudentWhereUniqueInput!]!): [Student]
  createEnrollment(data: EnrollmentCreateInput!): Enrollment
  createEnrollments(data: [EnrollmentCreateInput!]!): [Enrollment]
  updateEnrollment(where: EnrollmentWhereUniqueInput!, data: EnrollmentUpdateInput!): Enrollment
  updateEnrollments(data: [EnrollmentUpdateArgs!]!): [Enrollment]
  deleteEnrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  deleteEnrollments(where: [EnrollmentWhereUniqueInput!]!): [Enrollment]
  createAttendanceRecord(data: AttendanceRecordCreateInput!): AttendanceRecord
  createAttendanceRecords(data: [AttendanceRecordCreateInput!]!): [AttendanceRecord]
  updateAttendanceRecord(where: AttendanceRecordWhereUniqueInput!, data: AttendanceRecordUpdateInput!): AttendanceRecord
  updateAttendanceRecords(data: [AttendanceRecordUpdateArgs!]!): [AttendanceRecord]
  deleteAttendanceRecord(where: AttendanceRecordWhereUniqueInput!): AttendanceRecord
  deleteAttendanceRecords(where: [AttendanceRecordWhereUniqueInput!]!): [AttendanceRecord]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
  firstName: String
  lastName: String
  roles: UserRoleType
}

type Query {
  schoolSystem(where: SchoolSystemWhereUniqueInput!): SchoolSystem
  schoolSystems(where: SchoolSystemWhereInput! = {}, orderBy: [SchoolSystemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SchoolSystemWhereUniqueInput): [SchoolSystem!]
  schoolSystemsCount(where: SchoolSystemWhereInput! = {}): Int
  school(where: SchoolWhereUniqueInput!): School
  schools(where: SchoolWhereInput! = {}, orderBy: [SchoolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SchoolWhereUniqueInput): [School!]
  schoolsCount(where: SchoolWhereInput! = {}): Int
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  semester(where: SemesterWhereUniqueInput!): Semester
  semesters(where: SemesterWhereInput! = {}, orderBy: [SemesterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SemesterWhereUniqueInput): [Semester!]
  semestersCount(where: SemesterWhereInput! = {}): Int
  holiday(where: HolidayWhereUniqueInput!): Holiday
  holidays(where: HolidayWhereInput! = {}, orderBy: [HolidayOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HolidayWhereUniqueInput): [Holiday!]
  holidaysCount(where: HolidayWhereInput! = {}): Int
  class(where: ClassWhereUniqueInput!): Class
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  classSession(where: ClassSessionWhereUniqueInput!): ClassSession
  classSessions(where: ClassSessionWhereInput! = {}, orderBy: [ClassSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassSessionWhereUniqueInput): [ClassSession!]
  classSessionsCount(where: ClassSessionWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  student(where: StudentWhereUniqueInput!): Student
  students(where: StudentWhereInput! = {}, orderBy: [StudentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudentWhereUniqueInput): [Student!]
  studentsCount(where: StudentWhereInput! = {}): Int
  enrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  enrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  attendanceRecord(where: AttendanceRecordWhereUniqueInput!): AttendanceRecord
  attendanceRecords(where: AttendanceRecordWhereInput! = {}, orderBy: [AttendanceRecordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttendanceRecordWhereUniqueInput): [AttendanceRecord!]
  attendanceRecordsCount(where: AttendanceRecordWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
